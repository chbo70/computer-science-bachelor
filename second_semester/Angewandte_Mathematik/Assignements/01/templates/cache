#= Scalar/Matrix Multiplication =#
@assert multiply(0.0, [1.0 2.0]) == (0.0 * [1.0 2.0])
@assert multiply(2.0, [1.0 2.0]) == (2.0 * [1.0 2.0])

@assert multiply(1.0, [[1.0, 2.0] [1.0, 2.0]]) == (1.0 * [[1.0, 2.0] [1.0, 2.0]])
@assert multiply(1.0, [[1.0 2.0] [1.0 2.0]]) == (1.0 * [[1.0 2.0] [1.0 2.0]])
@assert multiply(2.0, [[1.0, 2.0] [1.0, 2.0]]) == (2.0 * [[1.0, 2.0] [1.0, 2.0]])
@assert multiply(2.0, [[1.0 2.0] [1.0 2.0]]) == (2.0 * [[1.0 2.0] [1.0 2.0]])
@assert multiply(0.0, [[1.0, 2.0] [1.0, 2.0]]) != [[0.0, 0.0] [1.0, 2.0]]
@assert multiply(0.0, [[1.0 2.0] [1.0 2.0]]) != [[0.0 0.0] [1.0 2.0]]

#= Dot Product =#
@assert dot([1.0, 1.0], [1.0, 1.0]) == 2.0
@assert dot([0.0, 1.0], [1.0, 1.0]) == 1.0
@assert dot([0.0, 0.0], [1.0, 1.0]) == 0.0
@assert dot([0.0, 0.0], [0.0, 0.0]) == 0.0
@assert dot([1.0 1.0], [1.0 1.0]) == 2.0
@assert dot([0.0 1.0], [1.0 1.0]) == 1.0
@assert dot([0.0 0.0], [1.0 1.0]) == 0.0
@assert dot([0.0 0.0], [0.0 0.0]) == 0.0
@assert dot([0.0, 2.0], [1.0, 2.0]) == 4.0
@assert dot([0.0, 2.0], [1.0, 1.0]) == 2.0

#= Vector/Matrix Multiplication =#
@assert multiply([0.0, 0.0], [[1.0, 1.0] [1.0, 1.0]]) == [0.0, 0.0]
@assert multiply([0.0, 2.0], [[1.0, 1.0] [1.0, 1.0]]) == [2.0, 2.0]
@assert multiply([1.0, 2.0], [[1.0, 1.0] [1.0, 1.0]]) == [3.0, 3.0]
@assert multiply([2.0, 2.0], [[1.0, 1.0] [1.0, 1.0]]) == [4.0, 4.0]
@assert multiply([0.0, 0.0], [[1.0, 2.0] [1.0, 1.0]]) == [0.0, 0.0]
@assert multiply([0.0, 2.0], [[1.0, 2.0] [1.0, 1.0]]) == [2.0, 2.0]
@assert multiply([1.0, 2.0], [[1.0, 2.0] [1.0, 1.0]]) == [3.0, 4.0]
@assert multiply([2.0, 2.0], [[1.0, 2.0] [1.0, 1.0]]) == [4.0, 6.0]

#= Matrix/Matrix Multiplication =#
@assert multiply([[0.0, 0.0] [0.0, 0.0]], [[1.0, 1.0] [1.0, 1.0]]) == [[0.0, 0.0] [0.0, 0.0]]
@assert multiply([[0.0, 0.0] [1.0, 1.0]], [[1.0, 1.0] [1.0, 1.0]]) == [[1.0, 1.0] [1.0, 1.0]]
@assert multiply([[1.0, 1.0] [1.0, 1.0]], [[1.0, 1.0] [1.0, 1.0]]) == [[2.0, 2.0] [2.0, 2.0]]
@assert multiply([[0.0, 0.0] [0.0, 1.0]], [[1.0, 1.0] [1.0, 1.0]]) == [[0.0, 1.0] [0.0, 1.0]]
@assert multiply([[0.0, 1.0] [0.0, 1.0]], [[1.0, 1.0] [1.0, 1.0]]) == [[0.0, 2.0] [0.0, 2.0]]
@assert multiply([[1.0, 0.0] [1.0, 0.0]], [[1.0, 1.0] [1.0, 1.0]]) == [[2.0, 0.0] [2.0, 0.0]]

#= Matrix Transpose =#
@assert transpose([[0] [0]]) == [0 0]'
@assert transpose([[1] [2]]) == [1 2]'
@assert transpose([[1, 1] [2, 2]]) == [1 2; 1 2]'
@assert transpose([[1, 2] [3, 4]]) == [1 3; 2 4]'
@assert transpose([[1, 1, 1, 1] [2, 2, 2, 2]]) == [1 2; 1 2; 1 2; 1 2]'
@assert transpose([[1] [2] [3] [4]]) == [1 2 3 4]'

#= Matrix/Matrix Addition =#
@assert add([[9, 8, 7] [6, 5, 4] [3, 2, 1]],
  [[1, 2, 3] [4, 5, 6] [7, 8, 9]]) == [[9, 8, 7] [6, 5, 4] [3, 2, 1]] + [[1, 2, 3] [4, 5, 6] [7, 8, 9]]
@assert add([[-1, -2, -3] [-4, -5, -6] [-7, -8, -9]],
  [[1, 2, 3] [4, 5, 6] [7, 8, 9]]) == [[-1, -2, -3] [-4, -5, -6] [-7, -8, -9]] + [[1, 2, 3] [4, 5, 6] [7, 8, 9]]

  for i in b
    multiply(a,i)
  end



  function transpose(a::Array{Int64,2})
    i=1
    j=1
    jk=[1]
    
    while checkbounds(Bool,a,i:length(a))
        
        if(j > length(a)/2)
            pop!(jk)
            break
        end
        
        
        jk = append!(append!(reverse(a[j,:]),jk))
        
        j = j + 1
        i = i +1
        #hcat(a[1,:],a[2,:])
    end

    println(jk)
    if ((1,2) == size(a))
        return (reshape((jk),reverse(size(a))))
    else
        return reverse(reshape(jk,size(a)))
    end
end

c = [[1, 1] [2, 2]]
b = [[0] [0]]
println(size(b))
println(transpose(b))

println(size(c))
println(transpose(c))


return[for i in eachindex(a)
        if i > c 
            return
        else
            for j in eachindex(a)
                if j > r || j > c
                    break
                else
                    b = a[j,i]
                    save = collect(b)
                    #println(b)
                end
            end
        end
    end]


    #= Vector/Matrix Multiplication = c)=#
function multiply(a::Array{Float64,1}, b::Array{Float64,2})
    r1 = length(a[:,1])
    println(r1)
    (r2,c2) = size(b)
    println((r2,c2))
    save = []
    k = []
    if r1 == c2
      for i in 1:r1 
        for j in 1:r2
          k = [dot2(a[:,1],a[j,:])]
        end
          return k
      end
    else
      return error("wrong dimensions")
    end
    
    #(sum(exp.(transpose((broadcast(+, log.(a), log.(transpose(b))))))),dims=2)
    
    #[sum((exp.(broadcast(+, broadcast(log,a), broadcast(log, b[1,:])))),dims=2)]
  end